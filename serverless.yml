org: drapaiton
app: drapaiton-portfolio

frameworkVersion: '2'
service: pubsub-model

package:
  patterns:
    - '!node_modules/**'
    - '!.aws-sam/**'
    - '!.serverless/**'

custom:
  # This can be changed to the desired origin
  # When using lambda proxy integration, you have to manually add the CORS headers to responses...
  # https://github.com/serverless/serverless/issues/4681
  CORS_ORIGIN: '*'

provider:
  name: aws
  runtime: python3.8
  region: us-east-2
  memorySize: 128
  lambdaHashingVersion: 20201221
  stage: prod
  timeout: 5
  logs:
    websocket:
      level: INFO
  websocketsApiRouteSelectionExpression: $request.body.action
  environment:
    PRODUCTION: 1
    CORS_ORIGIN: ${self:custom.CORS_ORIGIN}
    WEB_SOCKET_ENDPOINT:
      Fn::Join:
        - ''
        - - wss://
          - Ref: WebsocketsApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:provider.stage}
    APIG_ENDPOINT:
      Fn::Join:
        - ''
        - - https://
          - Ref: ApiGatewayRestApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:provider.stage}
    DYNAMODB_SOCKETS_TYPE_GSI: ${self:service}-sockets-type-gsi-${opt:stage, self:provider.stage}
    DYNAMODB_SOCKETS_TABLE: ${self:service}-sockets-${opt:stage, self:provider.stage}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:Scan"
          Resource:
            - Fn::GetAtt: [WebsocketUsersTable, Arn]
        - Effect: Allow
          Action:
            - "execute-api:ManageConnections"
          Resource:
            - "arn:aws:execute-api:*:*:**/@connections/*"

functions:
    auth:
      handler: src/auth.handler
      events:
        - http:
            path: /auth
            integration: lambda
            method: post
            cors: false
            private: false # Requires clients to add API keys values in the `x-api-key` header of their request
    websocket-connect:
        handler: src/web-socket.connect_handler
        events:
            - websocket:
                  route: $connect
                  authorizer:
                    name: auth
                    identitySource:
                      - "route.request.querystring.username"
    websocket-disconnect:
        handler: src/web-socket.disconnect_handler
        events:
            - websocket:
                  route: $disconnect
    websocket-default:
        handler: src/web-socket.default_handler
        events:
            - websocket:
                  route: $default
    websocket-message:
        handler: src/web-socket.writing_handler
        events:
            - websocket:
                  route: message
    endpoint-register-user:
        handler: src/new_resource.register_user_handler
        events: # The Events that trigger this Function
          - http:
              path: /register/{user}
              integration: lambda
              method: post
              cors: false
              private: false # Requires clients to add API keys values in the `x-api-key` header of their request
              request:
                passThrough: WHEN_NO_MATCH
                parameters:
                  paths:
                    user: true
    endpoint-send-message:
        handler: src/new_resource.send_message_handler
        events: # The Events that trigger this Function
          - http:
              path: /send
              integration: lambda
              method: post
              cors: false
              private: false # Requires clients to add API keys values in the `x-api-key` header of their request
              request:
                passThrough: WHEN_NO_MATCH
                schemas:
                  application/json: ${file(schemas/send_message.json)}

resources:
    # CloudFormation stack description
    Description: >
      PUB-SUB model implementation
      for a simple chat webapp application
    Resources:
        WebsocketUsersTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: WebSocketUsers
                KeySchema:
                    - AttributeName: username
                      KeyType: HASH
                    - AttributeName: event
                      KeyType: RANGE
                AttributeDefinitions:
                    - AttributeName: username
                      AttributeType: S
                    - AttributeName: event
                      AttributeType: S
                BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-python-requirements
