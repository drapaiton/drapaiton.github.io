org: drapaiton
app: drapaiton-portfolio

frameworkVersion: '2'
service: pubsub-model
plugins:
  - serverless-python-requirements

provider:
  name: aws
  runtime: python3.8
  region: us-east-2
  memorySize: 128
  lambdaHashingVersion: 20201221
  stage: dev
  timeout: 5
  logs:
    websocket: true
  websocketsApiRouteSelectionExpression: $request.body.action
  environment:
    CORS_ORIGIN: ${self:custom.corsOrigin}
    DYNAMODB_SOCKETS_TYPE_GSI: ${self:service}-sockets-type-gsi-${opt:stage, self:provider.stage}
    DYNAMODB_SOCKETS_TABLE: ${self:service}-sockets-${opt:stage, self:provider.stage}
  iamRoleStatements:
    # Websocket permissions
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:${opt:region, self:provider.region}:*:**/@connections/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SOCKETS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SOCKETS_TABLE}/index/${self:provider.environment.DYNAMODB_SOCKETS_TYPE_GSI}"


functions:
    authWebsocket:
      handler: src/lambdas/common/myauth.handler
    websocket-connect:
        handler: src/lambdas/web-socket.connect_handler
        events:
            - websocket:
                  route: $connect
                  authorizer:
                    name: authWebsocket
                    identitySource:
                      - 'route.request.querystring.Authorizer'
    websocket-disconnect:
        handler: src/lambdas/web-socket.disconnect_handler
        events:
            - websocket:
                  route: $disconnect
    websocket-default:
        handler: src/lambdas/web-socket.default_handler
        events:
            - websocket:
                  route: $default
    websocket-message:
        handler: src/lambdas/web-socket.writing_handler
        events:
            - websocket:
                  route: message
    endpoint-register-user:
        handler: src/lambdas/new_resource.register_user_handler
        events: # The Events that trigger this Function
          - http:
              path: /register/{user}
              integration: lambda
              method: post
              cors: false
              private: false # Requires clients to add API keys values in the `x-api-key` header of their request
              request:
                passThrough: WHEN_NO_MATCH
                parameters:
                  paths:
                    user: true
    endpoint-send-message:
        handler: src/lambdas/new_resource.send_message_handler
        events: # The Events that trigger this Function
          - http:
              path: /send
              integration: lambda
              method: post
              cors: false
              private: false # Requires clients to add API keys values in the `x-api-key` header of their request
              request:
                passThrough: WHEN_NO_MATCH
                schemas:
                  application/json: ${file(schemas/send_message.json)}

resources:
    # CloudFormation stack description
    Description: >
      PUB-SUB model implementation
      for a simple chat webapp application
    Resources:
        WeboscketUserTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: WebSocketUsers
                KeySchema:
                    - AttributeName: username
                      KeyType: HASH
                    - AttributeName: event
                      KeyType: RANGE
                AttributeDefinitions:
                    - AttributeName: username
                      AttributeType: S
                    - AttributeName: event
                      AttributeType: S
                BillingMode: PAY_PER_REQUEST
